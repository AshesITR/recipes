% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clean.R
\name{step_clean_levels}
\alias{step_clean_levels}
\alias{tidy.step_clean_levels}
\title{Clean Categorical Levels}
\usage{
step_clean_levels(
  recipe,
  ...,
  role = NA,
  trained = FALSE,
  clean = NULL,
  skip = FALSE,
  id = rand_id("clean_levels")
)

\method{tidy}{step_clean_levels}(x, ...)
}
\arguments{
\item{recipe}{A recipe object. The step will be added to the
sequence of operations for this recipe.}

\item{...}{One or more selector functions to choose which
variables that will potentially be reduced. See
\code{\link[=selections]{selections()}} for more details. For the \code{tidy}
method, these are not currently used.}

\item{role}{Not used by this step since no new variables are
created.}

\item{trained}{A logical to indicate if the quantities for
preprocessing have been estimated.}

\item{clean}{A named character vector to clean and recode categorical levels.
This is \code{NULL} until computed by \code{\link[=prep.recipe]{prep.recipe()}}. Note that if the original
variable is a character vector, it will be converted to a factor.}

\item{skip}{A logical. Should the step be skipped when the
recipe is baked by \code{\link[=bake.recipe]{bake.recipe()}}? While all operations are baked
when \code{\link[=prep.recipe]{prep.recipe()}} is run, some operations may not be able to be
conducted on new data (e.g. processing the outcome variable(s)).
Care should be taken when using \code{skip = TRUE} as it may affect
the computations for subsequent operations}

\item{id}{A character string that is unique to this step to identify it.}

\item{x}{A \code{step_clean_levels} object.}
}
\value{
An updated version of \code{recipe} with the new step
added to the sequence of existing steps (if any). For the \code{tidy} method, a
tibble with columns \code{terms} (the columns that are cleaned), \code{original} (the
original uncleaned levels) and \code{value} (the new cleaned levels).
}
\description{
\code{step_clean_levels} creates a \emph{specification} of a recipe step that will
clean nominal data so the levels consist only of letters, numbers,
and the underscore.
}
\details{
The new levels are cleaned and then reset with
\code{\link[dplyr:recode]{dplyr::recode_factor()}}. When data to be processed contains novel
levels (i.e., not contained in the training set), they are converted
to missing.
}
\examples{
library(modeldata)
data(Smithsonian)

smith_tr <- Smithsonian[1:15,]
smith_te <- Smithsonian[16:20,]

rec <- recipe(~ ., data = smith_tr)

rec <- rec \%>\%
  step_clean_levels(name)
rec <- prep(rec, training = smith_tr)

cleaned <- bake(rec, smith_tr)

tidy(rec, number = 1)

# novel levels are replaced with missing
bake(rec, smith_te)

}
\seealso{
\code{\link[=step_factor2string]{step_factor2string()}}, \code{\link[=step_string2factor]{step_string2factor()}},
\code{\link[=dummy_names]{dummy_names()}}, \code{\link[=step_regex]{step_regex()}}, \code{\link[=step_count]{step_count()}}, \code{\link[=step_ordinalscore]{step_ordinalscore()}},
\code{\link[=step_unorder]{step_unorder()}}, \code{\link[=step_novel]{step_novel()}}, \code{\link[=step_other]{step_other()}}
}
\concept{factors}
\concept{preprocessing}
\keyword{datagen}
